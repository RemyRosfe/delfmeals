<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Laura/Desktop/delfmeals/data/delfmeals.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2426"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="recettes" custom_title="0" dock_id="1" table="4,8:mainrecettes"/><dock_state state="000000ff00000000fd00000001000000020000043c000002befc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000043c0000012400ffffff0000025b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="menus" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="148"/><column index="3" value="300"/><column index="4" value="86"/><column index="5" value="300"/><column index="6" value="210"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="recettes" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="300"/><column index="3" value="70"/><column index="4" value="187"/><column index="5" value="117"/><column index="6" value="86"/><column index="7" value="114"/><column index="8" value="62"/><column index="9" value="241"/><column index="10" value="300"/><column index="11" value="300"/><column index="12" value="300"/><column index="13" value="210"/><column index="14" value="210"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- 1. DIAGNOSTIC INITIAL
-- Vérification des types actuels
SELECT 'DIAGNOSTIC INITIAL:' as action;
SELECT id, nom, 
       temps_preparation, typeof(temps_preparation) as type_temps,
       nb_personnes, typeof(nb_personnes) as type_personnes
FROM recettes 
WHERE typeof(temps_preparation) != 'integer' 
   OR typeof(nb_personnes) != 'integer';

-- 2. BACKUP DE SÉCURITÉ (optionnel)
-- CREATE TABLE recettes_backup AS SELECT * FROM recettes;

-- 3. CORRECTION DES NB_PERSONNES
-- Convertit tous les nb_personnes string en integer
UPDATE recettes SET nb_personnes = 4 WHERE nb_personnes = '4';
UPDATE recettes SET nb_personnes = 6 WHERE nb_personnes = '6';
UPDATE recettes SET nb_personnes = 8 WHERE nb_personnes = '8';
UPDATE recettes SET nb_personnes = 2 WHERE nb_personnes = '2';
UPDATE recettes SET nb_personnes = 12 WHERE nb_personnes = '12';

-- Force la conversion générale des nb_personnes (pour tous les cas)
UPDATE recettes 
SET nb_personnes = CAST(nb_personnes AS INTEGER) 
WHERE typeof(nb_personnes) = 'text' AND nb_personnes GLOB '[0-9]*';

-- 4. CORRECTION DES TEMPS_PREPARATION
-- Remplace les strings vides par NULL
UPDATE recettes SET temps_preparation = NULL WHERE temps_preparation = '';
UPDATE recettes SET temps_preparation = NULL WHERE temps_preparation IS NULL;

-- Convertit les temps courants (formats texte vers entier)
UPDATE recettes SET temps_preparation = 10 WHERE temps_preparation = '10 min';
UPDATE recettes SET temps_preparation = 15 WHERE temps_preparation = '15 min';
UPDATE recettes SET temps_preparation = 20 WHERE temps_preparation = '20 min';
UPDATE recettes SET temps_preparation = 25 WHERE temps_preparation = '25 min';
UPDATE recettes SET temps_preparation = 30 WHERE temps_preparation = '30 min';
UPDATE recettes SET temps_preparation = 35 WHERE temps_preparation = '35 min';
UPDATE recettes SET temps_preparation = 40 WHERE temps_preparation = '40 min';
UPDATE recettes SET temps_preparation = 45 WHERE temps_preparation = '45 min';
UPDATE recettes SET temps_preparation = 50 WHERE temps_preparation = '50 min';
UPDATE recettes SET temps_preparation = 60 WHERE temps_preparation = '60 min';
UPDATE recettes SET temps_preparation = 90 WHERE temps_preparation = '90 min';
UPDATE recettes SET temps_preparation = 120 WHERE temps_preparation = '120 min';
UPDATE recettes SET temps_preparation = 180 WHERE temps_preparation = '180 min';

-- Convertit '1h30' en 90, '2h' en 120, etc.
UPDATE recettes SET temps_preparation = 90 WHERE temps_preparation = '1h30';
UPDATE recettes SET temps_preparation = 90 WHERE temps_preparation = '1h 30';
UPDATE recettes SET temps_preparation = 120 WHERE temps_preparation = '2h';
UPDATE recettes SET temps_preparation = 150 WHERE temps_preparation = '2h30';
UPDATE recettes SET temps_preparation = 180 WHERE temps_preparation = '3h';

-- Force la conversion pour les temps qui sont juste des nombres en string
UPDATE recettes 
SET temps_preparation = CAST(temps_preparation AS INTEGER) 
WHERE typeof(temps_preparation) = 'text' 
  AND temps_preparation GLOB '[0-9]*'
  AND length(temps_preparation) &lt;= 3;

-- 5. NETTOYAGE DES NULL/VIDES POUR AUTRES CHAMPS
-- Convertit les strings vides en NULL pour les champs texte
UPDATE recettes SET origine = NULL WHERE origine = '';
UPDATE recettes SET note = NULL WHERE note = '';

-- 6. VÉRIFICATION FINALE
SELECT 'VÉRIFICATION FINALE:' as action;
SELECT id, nom, 
       temps_preparation, typeof(temps_preparation) as type_temps,
       nb_personnes, typeof(nb_personnes) as type_personnes
FROM recettes 
WHERE typeof(temps_preparation) != 'integer' 
   OR typeof(nb_personnes) != 'integer'
ORDER BY id;

-- 7. STATISTIQUES FINALES
SELECT 'STATISTIQUES FINALES:' as action;
SELECT 
  COUNT(*) as total_recettes,
  SUM(CASE WHEN typeof(nb_personnes) = 'integer' THEN 1 ELSE 0 END) as nb_personnes_ok,
  SUM(CASE WHEN typeof(temps_preparation) = 'integer' OR temps_preparation IS NULL THEN 1 ELSE 0 END) as temps_preparation_ok
FROM recettes;

-- 8. TEST DES OPÉRATIONS QUI CAUSAIENT L'ERREUR
SELECT 'TEST OPÉRATIONS:' as action;
-- Test tri par temps_preparation
SELECT 'Tri par temps:', COUNT(*) as rows_sorted 
FROM (SELECT * FROM recettes ORDER BY temps_preparation);

-- Test comparaison temps_preparation
SELECT 'Temps &gt; 30:', COUNT(*) as count 
FROM recettes WHERE temps_preparation &gt; 30;</sql><sql name="SQL 2*">-- VÉRIFICATION COMPLÈTE APRÈS CORRECTION
-- Exécutez cette requête pour voir l'état final

-- 1. Vérification des types finaux
SELECT 'ÉTAT FINAL DES TYPES:' as section;
SELECT 
  COUNT(*) as total_recettes,
  SUM(CASE WHEN typeof(nb_personnes) = 'integer' THEN 1 ELSE 0 END) as nb_personnes_integer,
  SUM(CASE WHEN typeof(temps_preparation) = 'integer' OR temps_preparation IS NULL THEN 1 ELSE 0 END) as temps_preparation_ok,
  SUM(CASE WHEN typeof(temps_preparation) = 'text' THEN 1 ELSE 0 END) as temps_preparation_string_restant
FROM recettes;

-- 2. Affichage des recettes avec leurs temps
SELECT 'ÉCHANTILLON RECETTES:' as section;
SELECT id, nom, nb_personnes, temps_preparation, 
       typeof(nb_personnes) as type_nb_pers, 
       typeof(temps_preparation) as type_temps
FROM recettes 
ORDER BY id 
LIMIT 10;

-- 3. Test des opérations qui causaient l'erreur
SELECT 'TESTS OPÉRATIONS:' as section;

-- Test tri (normalement cela plantait avant)
SELECT 'TEST TRI - Top 5 temps les plus courts:' as test;
SELECT nom, temps_preparation 
FROM recettes 
WHERE temps_preparation IS NOT NULL
ORDER BY temps_preparation ASC 
LIMIT 5;

-- Test comparaisons (normalement cela plantait avant)
SELECT 'TEST COMPARAISONS:' as test;
SELECT 
  'Recettes &lt;= 30 min' as categorie, COUNT(*) as count
FROM recettes WHERE temps_preparation &lt;= 30
UNION ALL
SELECT 
  'Recettes 31-60 min' as categorie, COUNT(*) as count  
FROM recettes WHERE temps_preparation BETWEEN 31 AND 60
UNION ALL
SELECT 
  'Recettes &gt; 60 min' as categorie, COUNT(*) as count
FROM recettes WHERE temps_preparation &gt; 60;

-- 4. Vérification qu'il n'y a plus de problèmes
SELECT 'PROBLÈMES RESTANTS:' as section;
SELECT id, nom, temps_preparation, typeof(temps_preparation)
FROM recettes 
WHERE typeof(temps_preparation) = 'text' 
  AND temps_preparation IS NOT NULL;</sql><sql name="SQL 3*">-- IDENTIFICATION ET CORRECTION DES 3 RECETTES RESTANTES
-- Exécutez ces requêtes une par une dans DB Browser

-- 1. IDENTIFICATION des 3 problématiques
SELECT 'RECETTES AVEC TEMPS_PREPARATION STRING:' as info;
SELECT id, nom, temps_preparation, typeof(temps_preparation) as type_temps
FROM recettes 
WHERE typeof(temps_preparation) = 'text' 
  AND temps_preparation IS NOT NULL;

-- 2. DÉTAIL du contenu exact pour comprendre le problème
SELECT 'ANALYSE DÉTAILLÉE:' as info;
SELECT id, nom, 
       temps_preparation as valeur_actuelle,
       length(temps_preparation) as longueur,
       typeof(temps_preparation) as type_actuel,
       CASE 
         WHEN temps_preparation = '' THEN 'STRING VIDE'
         WHEN temps_preparation LIKE '%min%' THEN 'CONTIENT MIN'
         WHEN temps_preparation LIKE '%h%' THEN 'CONTIENT H'
         WHEN temps_preparation GLOB '[0-9]*' THEN 'CHIFFRES SEULEMENT'
         ELSE 'AUTRE FORMAT'
       END as format_detecte
FROM recettes 
WHERE typeof(temps_preparation) = 'text' 
  AND temps_preparation IS NOT NULL;

-- 3. CORRECTION CIBLÉE 
-- (Ces requêtes seront adaptées selon ce qu'on trouve ci-dessus)

-- Si c'est &quot;2 min par crêpe&quot; ou formats similaires
UPDATE recettes 
SET temps_preparation = 2 
WHERE temps_preparation = '2 min par crêpe';

-- Si c'est des strings vides ou bizarres, on met NULL ou valeur par défaut
UPDATE recettes 
SET temps_preparation = 30 
WHERE temps_preparation = '' AND id IN (
  SELECT id FROM recettes 
  WHERE typeof(temps_preparation) = 'text'
);

-- Conversion forcée pour tout ce qui reste et qui ressemble à un nombre
UPDATE recettes 
SET temps_preparation = CASE
  WHEN temps_preparation LIKE '%min%' THEN 
    CAST(REPLACE(REPLACE(temps_preparation, ' min', ''), 'min', '') AS INTEGER)
  WHEN temps_preparation GLOB '[0-9]*' THEN 
    CAST(temps_preparation AS INTEGER)
  ELSE 30
END
WHERE typeof(temps_preparation) = 'text' 
  AND temps_preparation IS NOT NULL;

-- 4. VÉRIFICATION FINALE
SELECT 'VÉRIFICATION APRÈS CORRECTION:' as info;
SELECT id, nom, temps_preparation, typeof(temps_preparation)
FROM recettes 
WHERE typeof(temps_preparation) = 'text' 
  AND temps_preparation IS NOT NULL;

-- 5. CONFIRMATION QUE TOUT EST BON
SELECT 'ÉTAT FINAL:' as info;
SELECT 
  COUNT(*) as total_recettes,
  SUM(CASE WHEN typeof(temps_preparation) = 'integer' OR temps_preparation IS NULL THEN 1 ELSE 0 END) as temps_ok,
  SUM(CASE WHEN typeof(temps_preparation) = 'text' THEN 1 ELSE 0 END) as temps_problématiques
FROM recettes;</sql><sql name="SQL 4*">-- DIAGNOSTIC ULTRA-POUSSÉ POUR TROUVER LE PROBLÈME EXACT
-- Exécutez ce script complet dans DB Browser

-- 1. VÉRIFICATION ABSOLUE DE TOUS LES TYPES
SELECT '=== DIAGNOSTIC COMPLET ===' as section;

-- Vérifie TOUS les champs qui pourraient poser problème
SELECT 
  'TYPES PAR COLONNE' as info,
  'id' as colonne,
  COUNT(*) as total,
  SUM(CASE WHEN typeof(id) = 'integer' THEN 1 ELSE 0 END) as integers,
  SUM(CASE WHEN typeof(id) = 'text' THEN 1 ELSE 0 END) as strings,
  SUM(CASE WHEN typeof(id) = 'real' THEN 1 ELSE 0 END) as reals
FROM recettes

UNION ALL

SELECT 
  'TYPES PAR COLONNE' as info,
  'nb_personnes' as colonne,
  COUNT(*) as total,
  SUM(CASE WHEN typeof(nb_personnes) = 'integer' THEN 1 ELSE 0 END) as integers,
  SUM(CASE WHEN typeof(nb_personnes) = 'text' THEN 1 ELSE 0 END) as strings,
  SUM(CASE WHEN typeof(nb_personnes) = 'real' THEN 1 ELSE 0 END) as reals
FROM recettes

UNION ALL

SELECT 
  'TYPES PAR COLONNE' as info,
  'temps_preparation' as colonne,
  COUNT(*) as total,
  SUM(CASE WHEN typeof(temps_preparation) = 'integer' THEN 1 ELSE 0 END) as integers,
  SUM(CASE WHEN typeof(temps_preparation) = 'text' THEN 1 ELSE 0 END) as strings,
  SUM(CASE WHEN typeof(temps_preparation) = 'real' THEN 1 ELSE 0 END) as reals
FROM recettes;

-- 2. IDENTIFICATION PRÉCISE DES PROBLÈMES RESTANTS
SELECT '=== PROBLÈMES DÉTAILLÉS ===' as section;

-- Toutes les recettes avec des types problématiques
SELECT 
  id, nom,
  nb_personnes, typeof(nb_personnes) as type_nb_pers,
  temps_preparation, typeof(temps_preparation) as type_temps,
  '→ PROBLÈME nb_personnes' as issue
FROM recettes 
WHERE typeof(nb_personnes) != 'integer'

UNION ALL

SELECT 
  id, nom,
  nb_personnes, typeof(nb_personnes) as type_nb_pers,
  temps_preparation, typeof(temps_preparation) as type_temps,
  '→ PROBLÈME temps_preparation' as issue
FROM recettes 
WHERE typeof(temps_preparation) != 'integer' AND temps_preparation IS NOT NULL;

-- 3. VALEURS EXACTES DES PROBLÈMES
SELECT '=== VALEURS PROBLÉMATIQUES ===' as section;

SELECT id, nom, 
       nb_personnes as valeur,
       typeof(nb_personnes) as type_val,
       length(nb_personnes) as longueur,
       'nb_personnes' as champ
FROM recettes 
WHERE typeof(nb_personnes) != 'integer'

UNION ALL

SELECT id, nom,
       temps_preparation as valeur,
       typeof(temps_preparation) as type_val,
       length(temps_preparation) as longueur,
       'temps_preparation' as champ
FROM recettes 
WHERE typeof(temps_preparation) != 'integer' 
  AND temps_preparation IS NOT NULL;

-- 4. TEST DES OPÉRATIONS QUI PLANTENT
SELECT '=== TESTS OPÉRATIONS ===' as section;

-- Test tri nb_personnes (peut planter si types mixtes)
SELECT 'TEST TRI NB_PERSONNES' as test_name;
-- (Commenté car peut planter)
-- SELECT id, nom, nb_personnes FROM recettes ORDER BY nb_personnes LIMIT 3;

-- Test tri temps_preparation (peut planter si types mixtes)  
SELECT 'TEST TRI TEMPS_PREPARATION' as test_name;
-- (Commenté car peut planter)
-- SELECT id, nom, temps_preparation FROM recettes ORDER BY temps_preparation LIMIT 3;

-- 5. CORRECTION FORCÉE FINALE
SELECT '=== CORRECTION FORCÉE ===' as section;

-- Force TOUS les nb_personnes à être des entiers
UPDATE recettes 
SET nb_personnes = CASE
  WHEN typeof(nb_personnes) = 'text' AND nb_personnes GLOB '[0-9]*' THEN 
    CAST(nb_personnes AS INTEGER)
  WHEN typeof(nb_personnes) = 'text' AND nb_personnes != '' THEN 4
  WHEN nb_personnes IS NULL THEN 4
  ELSE nb_personnes
END;

-- Force TOUS les temps_preparation à être des entiers ou NULL
UPDATE recettes 
SET temps_preparation = CASE
  WHEN typeof(temps_preparation) = 'text' AND temps_preparation = '' THEN NULL
  WHEN typeof(temps_preparation) = 'text' AND temps_preparation GLOB '[0-9]*' THEN 
    CAST(temps_preparation AS INTEGER)
  WHEN typeof(temps_preparation) = 'text' THEN NULL
  ELSE temps_preparation
END;

-- 6. VÉRIFICATION FINALE ABSOLUE
SELECT '=== VÉRIFICATION FINALE ===' as section;

-- Compte final des types
SELECT 
  'ÉTAT FINAL' as status,
  COUNT(*) as total_recettes,
  SUM(CASE WHEN typeof(nb_personnes) = 'integer' THEN 1 ELSE 0 END) as nb_pers_integer,
  SUM(CASE WHEN typeof(temps_preparation) = 'integer' OR temps_preparation IS NULL THEN 1 ELSE 0 END) as temps_prep_ok,
  SUM(CASE WHEN typeof(nb_personnes) != 'integer' THEN 1 ELSE 0 END) as nb_pers_problematic,
  SUM(CASE WHEN typeof(temps_preparation) = 'text' THEN 1 ELSE 0 END) as temps_prep_problematic
FROM recettes;

-- 7. EXEMPLE DE DONNÉES FINALES
SELECT '=== ÉCHANTILLON FINAL ===' as section;
SELECT id, nom, nb_personnes, temps_preparation,
       typeof(nb_personnes) as type_nb, typeof(temps_preparation) as type_temps
FROM recettes 
ORDER BY id 
LIMIT 5;</sql><sql name="SQL 5*">-- Force tous les temps_preparation à être des entiers
UPDATE recettes SET temps_preparation = CAST(temps_preparation AS INTEGER) WHERE typeof(temps_preparation) = 'text' AND temps_preparation != '';
UPDATE recettes SET temps_preparation = NULL WHERE temps_preparation = '';</sql><current_tab id="4"/></tab_sql></sqlb_project>
